/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This Source Code Form is "Incompatible With Secondary Licenses", as
 * defined by the Mozilla Public License, v. 2.0.
 *
 */
 
// Manifest provides pipeline metadata and documentation
manifest {
  description = 'LR Variant Calling Pipeline' 
  author = 'Callum MacPhillamy'
}

// Global pipeline parameters
params {
  max_cpus = 32  // Maximum number of CPUs to use for any single process
}

// Import the base configuration settings
includeConfig 'conf/base.config'

//params.sourceDir = null  // Uncomment and specify to set a custom source directory


/* 
 * Defines execution profiles for different environments  
 * Each profile sets up specific container technology and resource configurations
 */ 

// Currently, only supports docker and singularity container technologies
profiles {
  // Standard Docker execution profile
  docker {
    docker.enabled = true                    // Enable Docker container execution
    docker.runOptions = '-u \$(id -u):\$(id -g)'  // Run as current user to avoid permission issues
    singularity.enabled = false              // Disable other container technologies
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    includeConfig 'conf/nextflow-docker.config'  // Include Docker-specific settings
  }
  
  // Docker profile optimized for MacOS/M1 laptops that need explicit platform specification
  docker_laptop {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g) --platform linux/amd64'
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    includeConfig 'conf/nextflow-docker.config'
  }
  
  // Singularity container profile, useful for HPC environments
  singularity {
    docker.enabled = false
    singularity.enabled = true
    podman.enabled = false
    shifter.enabled = false
    apptainer.enabled = false
    charliecloud.enabled = false
    singularity.runOptions = "--bind \${TMPDIR}:/tmp --bind \${TMPDIR} --bind ${params.sourceDir} --bind ${params.temp_dir}"
    includeConfig 'conf/nextflow-singularity.config'
  }
  
  // SLURM job scheduler integration for cluster computing
  slurm {
    process.executor = 'slurm'
    process.queue = 'a100cpu,icelake'
    process.resourceLimits = [cpus: 32, memory: 100.GB, time: 72.h]
  }
  
  // Example configuration for demonstration purposes
  example {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    includeConfig 'conf/nextflow-dockerexample.config'
  }
  
  // Local laptop execution configuration with conda support
  laptop {
    conda.enabled = true
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g) --platform linux/amd64'
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    includeConfig 'conf/nextflow-laptop.config'
  }
  
  // Custom profile for user 'lloyd' with conda environment
  lloyd {
	conda.enabled = true
	docker.enabled = false
	singularity.enabled = false
	podman.enabled = false
	shifter.enabled = false
	charliecloud.enabled = false
	includeConfig 'conf/nextflow-lloyd.config'
	process.conda = '/home/lloyd/mambaforge/envs/svcaller'
  }
}


// Helper function to enforce resource limits based on configuration
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}